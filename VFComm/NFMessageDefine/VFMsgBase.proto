package NFMsg; 

import "NFDefine.proto";

message Ident//The base protocol can not be transfer directly
{ 
    required int64		svrid = 1;
    required int64      index = 2;
}
message Vector2//The base protocol can not be transfer directly
{ 
    required float		x = 1;
    required float      y = 2;
}
message Vector3//The base protocol can not be transfer directly
{ 
    required float		x = 1;
    required float      y = 2;
    required float      z = 3;
}
////////////////////////BaseCommon/////////////////////////////
message PropertyInt//The base protocol can not be transfer directly
{ 
    required bytes     property_name = 1;
    required int64      data = 2;
}

message PropertyFloat//The base protocol can not be transfer directly
{ 
    required bytes     property_name = 1;
    required float      data = 2;
}

message PropertyString//The base protocol can not be transfer directly
{ 
    required bytes     property_name = 1;
    required bytes     data = 2;
}

message PropertyObject//The base protocol can not be transfer directly
{ 
    required bytes     property_name = 1;
    required Ident      data = 2;
}

message PropertyVector2//The base protocol can not be transfer directly
{ 
    required bytes     property_name = 1;
    required Vector2      data = 2;
}

message PropertyVector3//The base protocol can not be transfer directly
{ 
    required bytes     property_name = 1;
    required Vector3      data = 2;
}

///////////////////////////////////////////////

message RecordInt//The base protocol can not be transfer directly
{
    required int32      row = 1;
	required int32      col = 2;
	required int64      data = 3;
}


message RecordFloat//The base protocol can not be transfer directly
{
    required int32      row = 1;
	required int32      col = 2;
	required float      data = 3;
}

message RecordString//The base protocol can not be transfer directly
{ 
    required int32      row = 1;
	required int32      col = 2;
	required bytes     data = 3;
}

message RecordObject//The base protocol can not be transfer directly
{
    required int32      row = 1;
	required int32      col = 2;
	required Ident      data = 3;
}

message RecordVector2//The base protocol can not be transfer directly
{
    required int32      row = 1;
	required int32      col = 2;
	required Vector2      data = 3;
}

message RecordVector3//The base protocol can not be transfer directly
{
    required int32      row = 1;
	required int32      col = 2;
	required Vector3      data = 3;
}

message RecordAddRowStruct//The base protocol can not be transfer directly
{
	required int32 				row = 1;
	repeated RecordInt			record_int_list = 2;
	repeated RecordFloat		record_float_list = 3;
	repeated RecordString		record_string_list = 4;
	repeated RecordObject		record_object_list = 5;
	repeated RecordVector2      record_vector2_list = 6;
	repeated RecordVector3      record_vector3_list = 7;
}
message ObjectRecordBase//The base protocol can not be transfer directly
{ 
	required bytes  record_name = 1;
	repeated RecordAddRowStruct row_struct = 2;
}

/////////////////////////////////////////////////

message ObjectPropertyInt//when data's driver want to transfer data to client independently
{
	required Ident  player_id = 1;
    repeated PropertyInt	property_list = 2;
} 

message ObjectPropertyFloat//when data's driver want to transfer data to client independently
{
	required Ident  player_id = 1;
    repeated PropertyFloat  	property_list = 2;
} 

message ObjectPropertyString//when data's driver want to transfer data to client independently
{
	required Ident  player_id = 1;
    repeated PropertyString  	property_list = 2;
} 

message ObjectPropertyObject//when data's driver want to transfer data to client independently
{
	required Ident  player_id = 1;
    repeated PropertyObject  	property_list = 2;
}

message ObjectPropertyVector2//when data's driver want to transfer data to client independently
{
	required Ident  player_id = 1;
    repeated PropertyVector2  	property_list = 2;
}

message ObjectPropertyVector3//when data's driver want to transfer data to client independently
{
	required Ident  player_id = 1;
    repeated PropertyVector3  	property_list = 2;
}

message ObjectRecordInt//when data's driver want to transfer data to client independently
{
	required Ident  player_id = 1;
	required bytes     	record_name = 2;
    repeated RecordInt  	property_list = 3;
} 

message ObjectRecordFloat//when data's driver want to transfer data to client independently
{
	required Ident  player_id = 1;
	required bytes     	record_name = 2;
    repeated RecordFloat  	property_list = 3;
}

message ObjectRecordString//when data's driver want to transfer data to client independently
{
	required Ident  player_id = 1;
	required bytes     	record_name = 2;
    repeated RecordString  	property_list = 3;
}

message ObjectRecordObject//when data's driver want to transfer data to client independently
{
	required Ident  player_id = 1;
	required bytes     	record_name = 2;    
    repeated RecordObject  property_list = 3;
}

message ObjectRecordVector2//when data's driver want to transfer data to client independently
{
	required Ident  player_id = 1;
	required bytes     	record_name = 2;    
    repeated RecordVector2  property_list = 3;
}

message ObjectRecordVector3//when data's driver want to transfer data to client independently
{
	required Ident  player_id = 1;
	required bytes     	record_name = 2;    
    repeated RecordVector3  property_list = 3;
}

message ObjectRecordSwap//when data's driver want to transfer data to client independently
{
	required Ident  	player_id = 1;
	required bytes    	origin_record_name = 2;
	optional bytes		target_record_name = 3;
	required int32 		row_origin = 4;
	required int32 		row_target = 5;
}

message ObjectRecordAddRow//when data's driver want to transfer data to client independently
{
	required Ident     			player_id = 1;
	required bytes     			record_name = 2;
	repeated RecordAddRowStruct    row_data = 3;
}

message ObjectRecordRemove//when data's driver want to transfer data to client independently
{
	required Ident     	player_id = 1;
	required bytes    	record_name = 2;  
	repeated int32 		remove_row = 3;
}

///////////////////////////////////////////////////////////////////

message ObjectPropertyList//send all properties as a pack when client log in or log off
{
	required Ident  player_id = 1;
	repeated PropertyInt property_int_list = 2;
	repeated PropertyFloat property_float_list = 3;
	repeated PropertyString property_string_list = 4;
	repeated PropertyObject property_object_list = 5;
	repeated PropertyVector2 property_vector2_list = 6;
	repeated PropertyVector3 property_vector3_list = 7;
}
 
 message MultiObjectPropertyList//send all client's properties as a pack when client log in or log off
 {
	repeated ObjectPropertyList multi_player_property = 1;
 }

message ObjectRecordList//send all records as a pack when client log in or log off
{
	required Ident  player_id = 1;
	repeated ObjectRecordBase record_list = 2;
}

 message MultiObjectRecordList//send all client's records as a pack when client log in or log off
 {
	repeated ObjectRecordList multi_player_record = 1;
 }


///////////////////////////////////////////////////////////////////
message MsgBase
{
	required Ident  player_id = 1;//only be used between proxy-server and game-server
	required bytes  msg_data = 2;
	repeated Ident  player_Client_list = 3;
	optional Ident  hash_ident = 4;
}

message ReqCommand//Game command
{
	enum EGameCommandType
	{
		EGCT_MODIY_PROPERTY		= 0;//[property_name,value]
		EGCT_MODIY_ITEM			= 1;//[item_id,count]
		EGCT_CREATE_OBJECT		= 2;//[object_index,count]
		EGCT_ADD_ROLE_EXP		= 3;//
	}
	required Ident control_id = 1;
	required EGameCommandType command_id = 2;
	optional bytes command_str_value = 3;
	optional int64 command_value_int = 4;
	optional double command_value_float = 5;
	optional bytes command_value_str = 6;
	optional Ident command_value_object = 7;
	optional int32 row = 8;
	optional int32 col = 9;
}